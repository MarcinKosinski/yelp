% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/event-search.R
\name{event_search}
\alias{event_search}
\title{Search for events}
\usage{
event_search(location = NULL, latitude = NULL, longitude = NULL,
  radius_m = 40000, datetime_start = Sys.time(),
  datetime_end = datetime_start + lubridate::ddays(7), is_free = NA,
  categories = NULL, locale = "en_US", limit = 50L, offset = 0L,
  sort_on = c("popularity", "time_start"), sort_by = c("desc", "asc"),
  access_token = Sys.getenv("YELP_ACCESS_TOKEN", NA))
}
\arguments{
\item{location}{A string describing the location.}

\item{latitude}{A number representing the latitude to search close to.}

\item{longitude}{A number representing the longitude to search close to.}

\item{radius_m}{A number giving the radius, in metres, of the search circle
around the specified location.}

\item{datetime_start}{A date-time object coercible to \code{POSIXct} representing
the earliest time for events.}

\item{datetime_end}{A date-time object coercible to \code{POSIXct} representing
the latest time for events.}

\item{is_free}{Logical. Set to \code{TRUE} to return only cost-free events,
\code{FALSE} to return only paid event, and \code{NA} for both.}

\item{categories}{A character vector of search categories to filter on,
or \code{NULL} to return everything. See \code{\link{SUPPORTED_CATEGORY_ALIASES}}
for allowed values.}

\item{locale}{A string naming the locale. See \code{\link{SUPPORTED_LOCALES}}
for allowed values.}

\item{limit}{An integer giving the maximum number of businesses to return.
Maximum 50.}

\item{offset}{An integer giving the number of businesses to skip before
returning. Allows you to return more than 50 businesses (split between
multiple searches).}

\item{sort_on}{Should the return values be sorted by \code{"popularity"} or
\code{"datetime_start"}?}

\item{sort_by}{TODO}

\item{access_token}{A string giving an access token to authenticate the API
call. See \code{\link{get_access_token}}.}
}
\description{
Use the Yelp event search API to find events near a given location and in
a given time range.
}
